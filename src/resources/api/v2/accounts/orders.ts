// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../../core/resource';
import * as OrderFulfillmentsAPI from './order-fulfillments';
import { APIPromise } from '../../../../core/api-promise';
import { RequestOptions } from '../../../../internal/request-options';
import { path } from '../../../../internal/utils/path';

export class Orders extends APIResource {
  /**
   * Retrieves details of a specific order by its ID.
   */
  retrieve(orderID: string, params: OrderRetrieveParams, options?: RequestOptions): APIPromise<Order> {
    const { account_id } = params;
    return this._client.get(path`/api/v2/accounts/${account_id}/orders/${orderID}`, options);
  }

  /**
   * Lists all orders under the account.
   */
  list(accountID: string, options?: RequestOptions): APIPromise<OrderListResponse> {
    return this._client.get(path`/api/v2/accounts/${accountID}/orders`, options);
  }

  /**
   * Cancels an order by its ID. Note that this requires the order ID, not the order
   * request ID.
   */
  cancel(orderID: string, params: OrderCancelParams, options?: RequestOptions): APIPromise<Order> {
    const { account_id } = params;
    return this._client.post(path`/api/v2/accounts/${account_id}/orders/${orderID}/cancel`, options);
  }

  /**
   * Gets estimated fee data for an order to be placed directly through our
   * contracts.
   */
  getEstimatedFee(
    accountID: string,
    body: OrderGetEstimatedFeeParams,
    options?: RequestOptions,
  ): APIPromise<OrderGetEstimatedFeeResponse> {
    return this._client.post(path`/api/v2/accounts/${accountID}/orders/estimated_fee`, { body, ...options });
  }

  /**
   * Retrieves order fulfillments for a specific order.
   */
  retrieveFulfillments(
    orderID: string,
    params: OrderRetrieveFulfillmentsParams,
    options?: RequestOptions,
  ): APIPromise<OrderRetrieveFulfillmentsResponse> {
    const { account_id } = params;
    return this._client.get(path`/api/v2/accounts/${account_id}/orders/${orderID}/fulfillments`, options);
  }
}

export interface Order {
  /**
   * Identifier of the order
   */
  id: string;

  /**
   * Total amount of assets involved
   */
  asset_token_quantity: number;

  /**
   * Status of the order
   */
  brokerage_order_status:
    | 'PENDING_SUBMIT'
    | 'PENDING_CANCEL'
    | 'PENDING_ESCROW'
    | 'PENDING_FILL'
    | 'ESCROWED'
    | 'SUBMITTED'
    | 'CANCELLED'
    | 'FILLED'
    | 'REJECTED'
    | 'REQUIRING_CONTACT'
    | 'ERROR';

  /**
   * Blockchain that transaction was run on
   */
  chain_id: number;

  /**
   * Smart Contract address that order came from
   */
  order_contract_address: string;

  /**
   * Indicates if order is a buy or sell
   */
  order_side: 'BUY' | 'SELL';

  /**
   * Indicates how long order is valid
   */
  order_tif: 'DAY' | 'GTC' | 'IOC' | 'FOK';

  /**
   * Transaction hash for the order
   */
  order_transaction_hash: string;

  /**
   * Indicates what type of order
   */
  order_type: 'MARKET' | 'LIMIT';

  /**
   * Total amount of payment involved
   */
  payment_token_quantity: number;

  /**
   * Unique identifier of this Order generated by the order contract.
   */
  smart_contract_order_id: string;

  /**
   * Transaction hash for cancellation of order
   */
  cancel_transaction_hash?: string;

  /**
   * List of fees associated with order
   */
  fees?: Array<Record<string, unknown>>;

  /**
   * Total amount of network fee taken in USD
   */
  network_fee_in_usd?: number;
}

export type OrderListResponse = Array<Order>;

export interface OrderGetEstimatedFeeResponse {
  /**
   * Chain where the order is placed
   */
  chain_id: number;

  /**
   * FeeQuote structure to pass into contracts
   */
  fee_quote: OrderGetEstimatedFeeResponse.FeeQuote;

  /**
   * Signed FeeQuote structure to pass into contracts
   */
  fee_quote_signature: string;

  /**
   * Breakdown of fees
   */
  fees: Array<OrderGetEstimatedFeeResponse.Fee>;

  /**
   * Address of payment token used for fees
   */
  payment_token: string;
}

export namespace OrderGetEstimatedFeeResponse {
  /**
   * FeeQuote structure to pass into contracts
   */
  export interface FeeQuote {
    deadline: number;

    fee: string;

    orderId: string;

    requester: string;

    timestamp: number;
  }

  export interface Fee {
    /**
     * The quantity of the fee paid via payment token in ETH
     * <a href='https://ethereum.org/en/developers/docs/intro-to-ether/#what-is-ether' target='_blank'>(what
     * is ETH?)</a>
     */
    fee_in_eth: number;

    /**
     * The quantity of the fee paid via payment token in wei
     * <a href='https://ethereum.org/en/developers/docs/intro-to-ether/#denominations' target='_blank'>(what
     * is wei?)</a>
     */
    fee_in_wei: string;

    /**
     * Type of fee
     */
    type: 'SPONSORED_NETWORK' | 'NETWORK' | 'TRADING' | 'ORDER' | 'PARTNER_ORDER' | 'PARTNER_TRADING';
  }
}

export type OrderRetrieveFulfillmentsResponse = Array<OrderFulfillmentsAPI.OrderFulfillment>;

export interface OrderRetrieveParams {
  account_id: string;
}

export interface OrderCancelParams {
  account_id: string;
}

export interface OrderGetEstimatedFeeParams {
  /**
   * Chain where the order is placed
   */
  chain_id: number;

  /**
   * Order contract address
   */
  contract_address: string;

  /**
   * Order data from which to calculate the fees. To be specified in the future
   */
  order_data: Record<string, string>;
}

export interface OrderRetrieveFulfillmentsParams {
  account_id: string;
}

export declare namespace Orders {
  export {
    type Order as Order,
    type OrderListResponse as OrderListResponse,
    type OrderGetEstimatedFeeResponse as OrderGetEstimatedFeeResponse,
    type OrderRetrieveFulfillmentsResponse as OrderRetrieveFulfillmentsResponse,
    type OrderRetrieveParams as OrderRetrieveParams,
    type OrderCancelParams as OrderCancelParams,
    type OrderGetEstimatedFeeParams as OrderGetEstimatedFeeParams,
    type OrderRetrieveFulfillmentsParams as OrderRetrieveFulfillmentsParams,
  };
}
